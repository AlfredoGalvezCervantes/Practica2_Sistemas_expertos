import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk

# Diccionario con nombres de las series y rutas a las imágenes
series_imagenes = {
    'Black Mirror': 'black_mirror.jpg',
    'Squid Game': 'squid_game.jpg',
    'Breaking Bad': 'breaking_bad.jpg',
    'Game of Thrones': 'game_of_thrones.jpg',
    'Stranger Things': 'stranger_things.jpg'
}

# Diccionario con las características de cada serie
series_caracteristicas = {
    'Black Mirror': {
        'distópica': True,
        'tecnología avanzada': True,
        'episodios independientes': True
    },
    'Squid Game': {
        'juegos mortales': True,
        'competencia': True,
        'temas oscuros': True
    },
    'Breaking Bad': {
        'drogas': True,
        'crimen': True,
        'abogado': True
    },
    'Game of Thrones': {
        'fantasía': True,
        'intriga política': True,
        'acción': True,
        'personajes complejos': True
    },
    'Stranger Things': {
        'ciencia ficción': True,
        'sobrenatural': True,
        'misterio': True,
        'amistad': True
    }
}

def iniciar_juego():
    # Ocultar la ventana principal
    ventana_inicio.withdraw()
    
    # Crear ventana de preguntas
    ventana_preguntas = tk.Toplevel()
    ventana_preguntas.title("Preguntas")
    
    # Variables para el seguimiento de las preguntas y respuestas
    pregunta_index = 0
    respuestas_usuario = []

    # Función para actualizar la pregunta actual
    def actualizar_pregunta():
        nonlocal pregunta_index
        if pregunta_index < len(preguntas):
            pregunta_texto.set(preguntas[pregunta_index])
            pregunta_index += 1
        else:
            mostrar_resultado(respuestas_usuario, preguntas)

    # Función para manejar la selección de respuestas
    def obtener_respuesta(respuesta):
        respuestas_usuario.append(respuesta)
        # Imprimir la pregunta y la respuesta seleccionada en la consola
        print(f"Pregunta: {preguntas[pregunta_index - 1]}")
        print(f"Respuesta seleccionada: {'Sí' if respuesta else 'No'}")
        actualizar_pregunta()

    # Diccionario con las preguntas y sus respuestas
    preguntas = [
        "¿La serie presenta una sociedad distópica?",
        "¿Hay tecnología avanzada en la trama?",
        "¿Los episodios son independientes?",
        "¿Hay presencia de crimen en la serie?",
        "¿La serie contiene elementos de fantasía como dragones y magos?",
        "¿La serie involucra intriga política?",
        "¿La serie tiene escenas de peleas epicas?",
        "¿Los personajes de la serie son complejos y desarrollados?",
        "¿La trama incluye misterio ?",
        "¿Contiene escenas de accion?",
        "¿Hay juegos mortales en la serie?",
        "¿La serie presenta una competencia entre los personajes?",
        "¿La serie trata temas oscuros?",
        "¿Hay presencia de drogas en la serie?",
        "¿La serie tiene un abogado?",
        "¿La serie presenta elementos de ciencia ficción con Monstruos ?",
        "¿La amistad entre los personajes es un tema central?"
    ]
    
    pregunta_texto = tk.StringVar()
    pregunta_texto.set(preguntas[pregunta_index])

    label_pregunta = tk.Label(ventana_preguntas, textvariable=pregunta_texto, padx=20, pady=20)
    label_pregunta.pack()
    
    boton_si = tk.Button(ventana_preguntas, text="Sí", command=lambda: obtener_respuesta(True))
    boton_si.pack(side="left", padx=10)
    
    boton_no = tk.Button(ventana_preguntas, text="No", command=lambda: obtener_respuesta(False))
    boton_no.pack(side="right", padx=10)

# Función para mostrar el resultado del juego
def mostrar_resultado(respuestas_usuario, preguntas):
    print("Respuestas del usuario:")
    for pregunta, respuesta in zip(preguntas, respuestas_usuario):
        print(f"{pregunta}: {'Sí' if respuesta else 'No'}")
    print("\nComparación de respuestas:")

    coincidencias = {serie: sum(respuesta == caracteristicas.get(caracteristica, False) 
                                for caracteristica, respuesta in zip(preguntas, respuestas_usuario))
                     for serie, caracteristicas in series_caracteristicas.items()}

    # Sumar coincidencias solo a Game of Thrones si las respuestas son 'Sí'
    coincidencias['Game of Thrones'] += sum(respuestas_usuario[4:8])

    # Sumar coincidencias solo a Squid Game si las respuestas son 'Sí'
    coincidencias['Squid Game'] += sum(respuestas_usuario[10:13])

    # Sumar coincidencias solo a Black Mirror si las respuestas son 'Sí'
    coincidencias['Black Mirror'] += sum(respuestas_usuario[:3])

    # Sumar coincidencias solo a Breaking Bad si las respuestas son 'Sí'
    coincidencias['Breaking Bad'] += sum(respuestas_usuario[13:16])

    # Sumar coincidencias solo a Stranger Things si las respuestas son 'Sí'
    coincidencias['Stranger Things'] += sum(respuestas_usuario[16:])

    for serie, caracteristicas in series_caracteristicas.items():
        coincidencias_serie = sum(respuesta == caracteristicas.get(caracteristica, False) 
                                  for caracteristica, respuesta in zip(preguntas, respuestas_usuario))
        print(f"{serie}: {coincidencias_serie}/{len(preguntas)} coincidencias")

    max_coincidencias = max(coincidencias.values())
    series_coincidentes = [serie for serie, coincidencia in coincidencias.items() if coincidencia == max_coincidencias]
    
    if len(series_coincidentes) == 1:
        serie_adivinada = series_coincidentes[0]
        mostrar_ventana_serie(serie_adivinada)
    else:
        ventana_resultado = tk.Toplevel()
        ventana_resultado.title("Resultado")
        tk.Label(ventana_resultado, text="Hay múltiples series con las mismas coincidencias", padx=20, pady=10).pack()
        for serie in series_coincidentes:
            tk.Label(ventana_resultado, text=f"Posible serie: {serie}", padx=20, pady=5).pack()

# Función para mostrar la ventana con la serie adivinada
def mostrar_ventana_serie(serie_adivinada):
    ventana_serie = tk.Toplevel()
    ventana_serie.title("Resultado")
    
    if serie_adivinada in series_imagenes:
        imagen_path = series_imagenes[serie_adivinada]
        try:
            imagen = Image.open(imagen_path)
            imagen = imagen.resize((300, 200), Image.LANCZOS)  # Resize using LANCZOS
            imagen = ImageTk.PhotoImage(imagen)

            label_imagen = tk.Label(ventana_serie, image=imagen)
            label_imagen.image = imagen
            label_imagen.pack()
        except:
            tk.Label(ventana_serie, text="No se pudo cargar la imagen", padx=20, pady=10).pack()
            
        tk.Label(ventana_serie, text=f"¡Elegiste la serie: {serie_adivinada}!", padx=20, pady=10).pack()
        tk.Button(ventana_serie, text="Cerrar", command=ventana_serie.destroy).pack()
    else:
        messagebox.showerror("Error", "No se pudo encontrar la imagen de la serie elegida.")

# Crear la ventana principal
ventana_inicio = tk.Tk()
ventana_inicio.title("Adivina la Serie")

# Crear una cuadrícula de etiquetas para mostrar las imágenes
row_num = 0
for serie, imagen_path in series_imagenes.items():
    imagen = Image.open(imagen_path)
    imagen = imagen.resize((200, 150), Image.LANCZOS)  # Cambio a LANCZOS
    imagen = ImageTk.PhotoImage(imagen)
    
    label_imagen = tk.Label(ventana_inicio, image=imagen)
    label_imagen.image = imagen
    label_imagen.grid(row=row_num // 2, column=row_num % 2, padx=10, pady=10)
    
    row_num += 1

# Botón para iniciar el juego
boton_jugar = tk.Button(ventana_inicio, text="Iniciar Juego", command=iniciar_juego)
boton_jugar.grid(row=row_num // 2, column=0, columnspan=2, pady=10)

# Ejecutar el bucle de eventos
ventana_inicio.mainloop()
